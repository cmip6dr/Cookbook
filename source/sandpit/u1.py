import collections, uuid
import netCDF4

class VariableTemplateNC4(netCDF4._netCDF4.Variable):
    nc4Help = '''createVariable(self, varname, datatype, dimensions=(), zlib=False,
    complevel=4, shuffle=True, fletcher32=False, contiguous=False, chunksizes=None,
    endian='native', least_significant_digit=None, fill_value=None)'''


class WrapNetCDF4(netCDF4.Dataset):
  """Wraps the NetCDF4 Dataset class ... with the idea of being able to add a cdml writer"""
  __extra__ = dict()

  def __init__(self):
    self.__extra__['uid'] = str( uuid.uuid1() )
    super(WrapNetCDF4, self).__init__('%s.nc' % self.__extra__['uid'], diskless=True, mode='w')

  def set_var(self,*args,**kwargs):
    attributes = None
    data = None
    if 'attributes' in kwargs:
      attributes = kwargs.pop( 'attributes' )
    if 'data' in kwargs:
      data = kwargs.pop( 'data' )

##
## initially tried using VariableTemplateNC4 ...
##   but this messed up assigment of the self.variables object, so that variables created ended up in limbo.
##   a single level of wrapping appears the best option here (alternative to find out what createVariable is actually
##   doing ... but this is probably in C++ code).
##
    var = self.createVariable(*args,**kwargs)


## use of setncatts causes some problems ... AttributeError: __getattribute__ when displaying a slice
    if attributes != None:
##      var.setncatts( attributes )
      for k,v in attributes.items():
        setattr( var, k, v )

    if data != None:
      var[...] = data
    return var

  def defaults(self):
    for k,v in {'time': 10, 'lat':90, 'lon':180}.items():
       self.createDimension( k,v )
    self.__extra__['main'] = 'orog'
    self.set_var( 'time', 'double', ('time',), attributes={'standard_name':'time', 'units':'days since 2000-01-01 00:00:00'},
              data = [float(x) for x in range(10)] )

    self.set_var( 'lon', 'double', ('lon',),  attributes={'standard_name':'longitude', 'units':'degree_east'},
              data = [float(x)*2. for x in range(180)] )
    self.set_var( 'lat', 'double', ('lat',),  attributes={'standard_name':'latitude', 'units':'degree_north'},
              data = [float(x)*2. - 89. for x in range(90)] )

    self.set_var( 'orog', 'float', ('time','lat','lon'), attributes={'standard_name':'orography', 'units':'m'})

class VariableTemplate(object):
  attributes = dict()
  attribute_intent = dict()
  dimensions = list()
  intent = 'float'
  data = list()

  def set(self,dimensions, attributes, data=None, intent=None, attribute_intent=None):
    self.dimensions = dimensions
    self.attributes = attributes
    if data != None:
      self.data = data
    if intent != None:
      self.intent = intent
    if attribute_intent != None:
      self.attribute_intent = attribute_intent

class ContentTemplateBasic(dict):
  """A simple representation of NetCDF file contents.
  
  Contains
  --------
  dimensions : a dictionary of key-value pairs. Keys should be valid NetCDF dimension names and values positive integers;
  globals: a dictionary of key-value pairs. [[TODO: need to distinguish single vs. double precision in intent]]
  globals_intent: where needed, specify the intended type of a variable (needed to distingush between float and double)
  variables : a dictionary of variables .. including variables for dimensions if provided;
  unlimited: name of unlimited dimension, if set;
  main: name of main data variable, if set;


  Methods:
    validate_dimensions: verify that dimensions of variables are defined in parent instance;
    defaults: load the instance with default contents representing an orographic field on a regular grid [TIME EVOLVING]
  """
  
  variables = collections.defaultdict( VariableTemplate )
  globals = dict()
  dimensions = dict()
  unlimited = None
  main = None

  def validate_dimensions(self):
    for n,v in self.variables.items():
      for d in v.dimensions:
        assert d in self.dimensions

  def defaults(self):
    self.dimensions = {'time': 10, 'lat':90, 'lon':180}
    self.unlimited = 'time'
    self.main = 'orog'
    self.variables['time'].set( ['time'], {'standard_name':'time', 'units':'days since 2000-01-01 00:00:00'},
              data = [float(x) for x in range(10)], intent='double' )

    self.variables['lon'].set( ['lon'], {'standard_name':'longitude', 'units':'degree_east'},
              data = [float(x)*2. for x in range(180)], intent='double' )
    self.variables['lat'].set( ['lat'], {'standard_name':'latitude', 'units':'degree_north'},
              data = [float(x)*2. - 89. for x in range(90)], intent='double' )

    self.variables['orog'].set( ['time','lat','lon'], {'standard_name':'orography', 'units':'m'})
    self.globals = {'comment':'dummy dataset generated by ContentTemplate',
                    'institute':'Centre for Environmental Data Analysis'}

class ContentTemplate(dict):
  """A simple representation of NetCDF file contents. Using NetCDF4
  
  Contains
  --------
  dimensions : a dictionary of key-value pairs. Keys should be valid NetCDF dimension names and values positive integers;
  globals: a dictionary of key-value pairs. [[TODO: need to distinguish single vs. double precision in intent]]
  globals_intent: where needed, specify the intended type of a variable (needed to distingush between float and double)
  variables : a dictionary of variables .. including variables for dimensions if provided;
  unlimited: name of unlimited dimension, if set;
  main: name of main data variable, if set;


  Methods:
    validate_dimensions: verify that dimensions of variables are defined in parent instance;
    defaults: load the instance with default contents representing an orographic field on a regular grid [TIME EVOLVING]
  """
  
  variables = collections.defaultdict( VariableTemplate )
  globals = dict()
  dimensions = dict()
  unlimited = None
  main = None

  def __init__(self):
    nc = netCDF4.Dataset( 'dummy.nc', diskless=True, mode='w' )

  def validate_dimensions(self):
    for n,v in self.variables.items():
      for d in v.dimensions:
        assert d in self.dimensions

  def defaults(self):
    self.dimensions = {'time': 10, 'lat':90, 'lon':180}
    self.unlimited = 'time'
    self.main = 'orog'
    self.variables['time'].set( ['time'], {'standard_name':'time', 'units':'days since 2000-01-01 00:00:00'},
              data = [float(x) for x in range(10)], intent='double' )

    self.variables['lon'].set( ['lon'], {'standard_name':'longitude', 'units':'degree_east'},
              data = [float(x)*2. for x in range(180)], intent='double' )
    self.variables['lat'].set( ['lat'], {'standard_name':'latitude', 'units':'degree_north'},
              data = [float(x)*2. - 89. for x in range(90)], intent='double' )

    self.variables['orog'].set( ['time','lat','lon'], {'standard_name':'orography', 'units':'m'})
    self.globals = {'comment':'dummy dataset generated by ContentTemplate',
                    'institute':'Centre for Environmental Data Analysis'}
