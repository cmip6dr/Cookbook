Field: air_temperature
----------------------
Data            : air_temperature(grid_latitude(10), grid_longitude(9)) K
Cell methods    : grid_latitude(10): grid_longitude(9): mean where land (interval: 0.1 degrees) time(1): maximum
Field ancils    : air_temperature standard_error(grid_latitude(10), grid_longitude(9)) = [[0.0, ..., 89.0]] K
Dimension coords: time(1) = [2018-12-16 12:00:00]
                : atmosphere_hybrid_height_coordinate(1) = [1.5]
                : grid_latitude(10) = [0.0, ..., 9.0] degrees
                : grid_longitude(9) = [0.0, ..., 8.0] degrees
Auxiliary coords: latitude(grid_latitude(10), grid_longitude(9)) = [[0.0, ..., 89.0]] degrees_north
                : longitude(grid_longitude(9), grid_latitude(10)) = [[0.0, ..., 89.0]] degrees_east
                : long_name=Grid latitude name(grid_latitude(10)) = [--, ..., j]
Cell measures   : measure:area(grid_longitude(9), grid_latitude(10)) = [[0.0, ..., 89.0]] km2
Coord references: grid_mapping_name:rotated_latitude_longitude
                : standard_name:atmosphere_hybrid_height_coordinate
Domain ancils   : key%domainancillary0(atmosphere_hybrid_height_coordinate(1)) = [10.0] m
                : key%domainancillary1(atmosphere_hybrid_height_coordinate(1)) = [20.0] 1
                : surface_altitude(grid_latitude(10), grid_longitude(9)) = [[0.0, ..., 89.0]] m

Writing to NETCDF4
  Writing <Field: air_temperature(grid_latitude(10), grid_longitude(9)) K>:
    Compression = ''
    Writing size 2 netCDF dimension for bounds: bounds2
    Writing <Bounds: time(2) > to netCDF variable: time_bounds(bounds2)
    Writing <DimensionCoordinate: time() days since 2018-12-01 > to netCDF variable: time()
    Writing <DomainAxis: size(1)> to netCDF dimension: atmosphere_hybrid_height_coordinate
    Writing <Bounds: atmosphere_hybrid_height_coordinate(1, 2) > to netCDF variable: bounds(atmosphere_hybrid_height_coordinate, bounds2)
    Writing <DimensionCoordinate: atmosphere_hybrid_height_coordinate(1) > to netCDF variable: atmosphere_hybrid_height_coordinate(atmosphere_hybrid_height_coordinate)
    Writing <DomainAxis: size(10)> to netCDF dimension: grid_latitude
    Writing <Bounds: grid_latitude(10, 2) > to netCDF variable: bounds_1(grid_latitude, bounds2)
    Writing <DimensionCoordinate: grid_latitude(10) degrees> to netCDF variable: grid_latitude(grid_latitude)
    Writing <DomainAxis: size(9)> to netCDF dimension: grid_longitude
    Writing <Bounds: grid_longitude(9, 2) > to netCDF variable: bounds_2(grid_longitude, bounds2)
    Writing <DimensionCoordinate: grid_longitude(9) degrees> to netCDF variable: grid_longitude(grid_longitude)
    Writing <AuxiliaryCoordinate: latitude(10, 9) degrees_north> to netCDF variable: latitude(grid_latitude, grid_longitude)
    Writing <AuxiliaryCoordinate: longitude(9, 10) degrees_east> to netCDF variable: longitude(grid_longitude, grid_latitude)
    Writing <AuxiliaryCoordinate: long_name=Grid latitude name(10) > to netCDF variable: auxiliary(grid_latitude, strlen1)
    Writing <Bounds: (1, 2) > to netCDF variable: bounds_3(atmosphere_hybrid_height_coordinate, bounds2)
    Writing <DomainAncillary: (1) m> to netCDF variable: a(atmosphere_hybrid_height_coordinate)
    Writing <Bounds: (1, 2) > to netCDF variable: bounds_4(atmosphere_hybrid_height_coordinate, bounds2)
    Writing <DomainAncillary: (1) 1> to netCDF variable: b(atmosphere_hybrid_height_coordinate)
    Writing <DomainAncillary: surface_altitude(10, 9) m> to netCDF variable: surface_altitude(grid_latitude, grid_longitude)
    Writing <CellMeasure: measure:area(9, 10) km2> to netCDF variable: cell_measure(grid_longitude, grid_latitude)
    Writing formula_terms attribute to netCDF variable atmosphere_hybrid_height_coordinate: 'orog: surface_altitude b: b a: a'
    Writing formula_terms to netCDF bounds variable bounds: 'orog: surface_altitude b: bounds_4 a: bounds_3'
      Adding 'dimensioncoordinate1' to <CoordinateReference: grid_mapping_name:rotated_latitude_longitude>
    Writing <CoordinateReference: grid_mapping_name:rotated_latitude_longitude> to netCDF variable: rotated_latitude_longitude
    Writing <FieldAncillary: air_temperature standard_error(10, 9) K> to netCDF variable: air_temperature_standard_error(grid_latitude, grid_longitude)
    Writing cell_measures attribute to netCDF variable air_temperature: 'area: cell_measure'
    Writing coordinates attribute to netCDF variable air_temperature: 'time latitude longitude auxiliary'
    Writing grid_mapping attribute to netCDF variable air_temperature: 'rotated_latitude_longitude'
    Writing ancillary_variables attribute to netCDF variable air_temperature: 'air_temperature_standard_error'
    Writing cell_methods attribute to netCDF variable air_temperature: grid_latitude: grid_longitude: mean where land (interval: 0.1 degrees) time: maximum
    Writing <Field: air_temperature(atmosphere_hybrid_height_coordinate(1), grid_latitude(10), grid_longitude(9)) K> to netCDF variable: air_temperature(atmosphere_hybrid_height_coordinate, grid_latitude, grid_longitude)
Platform: Linux-4.15.0-48-generic-x86_64-with-Ubuntu-16.04-xenial
python: 3.5.2 /usr/bin/python3
HDF5 library: 1.10.2
netcdf library: 4.6.3
netCDF4: 1.5.1.1 /usr/local/lib/python3.5/dist-packages/netCDF4/__init__.py
numpy: 1.16.3 /usr/local/lib/python3.5/dist-packages/numpy/__init__.py
future: 0.17.1 /usr/local/lib/python3.5/dist-packages/future/__init__.py
cfdm: 1.7.5 /usr/local/lib/python3.5/dist-packages/cfdm/__init__.py
